{"version":3,"sources":["Campos.js","Register.js","App.js","serviceWorker.js","index.js"],"names":["Campos","props","campos","this","class","name","map","campo","type","Component","Register","App","className","href","id","style","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAoCeA,E,kDAhCX,WAAYC,GAAQ,uCACVA,G,mDAGHA,GAEH,IAAIC,EAASC,KAAKF,MAAMC,OACxB,OACI,yBAAKE,MAAM,kBACP,yBAAKA,MAAM,aACP,0BAAMC,KAAK,YACNH,EAAOI,KAAI,SAAAC,GAAK,OAAI,6BAAK,+BAAQA,GAAc,2BAAOC,KAAK,OAAOJ,MAAM,qBACzE,6BACI,gDACA,2BAAOI,KAAK,WAAWH,KAAK,SAASD,MAAM,kBAE/C,6BACI,wDACA,2BAAOI,KAAK,WAAWH,KAAK,WAAWD,MAAM,kBAEjD,6BACA,yBAAKA,MAAM,SACP,4BAAQI,KAAK,SAASJ,MAAM,oCAA5B,kB,GAvBPK,aCoBNC,E,uKAhBP,OACI,yBAAKN,MAAM,aACP,yBAAKA,MAAM,iBACP,yBAAKA,MAAM,QACX,wCACA,mEAEA,6BACA,kBAAC,EAAD,CAAQF,OATP,CAAC,WAAY,aAAc,SAAU,oB,GAHnCO,aCwCRE,MArCf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKR,MAAM,8CACT,yBAAKA,MAAM,kBACT,uBAAGA,MAAM,4CAA4CS,KAAK,KAA1D,yBAAoF,0BAAMT,MAAM,WAAZ,cACpF,uBAAGA,MAAM,oBAAoBS,KAAK,KAAlC,QACA,uBAAGT,MAAM,oBAAoBS,KAAK,KAAlC,YACA,uBAAGT,MAAM,2BAA2BS,KAAK,KAAzC,iBAGJ,yBAAKT,MAAM,mBACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,gBAAgBU,GAAG,WAC5B,yBAAKV,MAAM,kBACT,wBAAIA,MAAM,mBACR,6BACA,6BACA,wBAAIA,MAAM,YAAV,0BACA,wBAAIA,MAAM,YAAV,uBAIN,yBAAKA,MAAM,UACT,kBAAC,EAAD,SAIN,gCACE,yBAAKA,MAAM,yCACT,wBAAIW,MAAO,CAACC,SAAU,IAAtB,6ECxBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.47bc2dd7.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\n\nclass Campos extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render(props) {\n\n        let campos = this.props.campos\n        return (\n            <div class='container pb-3'>\n                <div class='container'>\n                    <form name='registro'>\n                        {campos.map(campo => <div><label>{campo}</label><input type='text' class='form-control'></input></div>)}\n                        <div>\n                            <label>Contraseña</label>\n                            <input type='password' name='passwd' class='form-control'></input>\n                        </div>\n                        <div>\n                            <label>Repetir contraseña</label>\n                            <input type='password' name='repasswd' class='form-control'></input>\n                        </div>\n                        <hr></hr>\n                        <div class='boton'>\n                            <button type=\"button\" class=\"btn btn-primary btn-lg btn-block\">Enviar</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Campos;","import React, {Component} from 'react';\nimport Campos from './Campos';\n\nclass Register extends Component {\n\n    render(){\n        let campos = ['Nombre/s', 'Apellido/s', 'e-Mail', 'Telefono']\n        return (\n            <div class='container'>\n                <div class='box pt-4 my-3'>\n                    <div class='my-2'>\n                    <h2>Registro</h2>\n                    <p>¡Registrese en nuestro registro!</p>\n                    </div>\n                    <hr></hr>\n                    <Campos campos={campos}/>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Register;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Register from './Register';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-expand navbar-light bg-light\">\n        <div class=\"nav navbar-nav\">\n          <a class=\"nav-item nav-link active font-weight-bold\" href=\"#\">Registro Civil Online <span class=\"sr-only\">(current)</span></a>\n          <a class=\"nav-item nav-link\" href=\"#\">Home</a>\n          <a class=\"nav-item nav-link\" href=\"#\">Ingresar</a>\n          <a class=\"nav-item nav-link active\" href=\"#\">Registrarse</a>\n        </div>\n      </nav>\n      <div class='container-fluid'>\n        <div class='row'>\n          <nav class=\"col-1 sidebar\" id='sidebar'>\n            <div class=\"sidebar-sticky\">\n              <ul class=\"nav flex-column\">\n                <hr></hr>\n                <hr></hr>\n                <li class=\"nav-item\">Regístrese para ver</li>\n                <li class=\"nav-item\">más opciones.</li>\n              </ul>\n            </div>\n          </nav>\n          <div class='col-11'>\n            <Register />\n          </div>\n        </div>\n      </div>\n      <footer>\n        <nav class=\"nav justify-content-center text-light\">\n          <h6 style={{fontSize: 9}}>2020 - UTN e-Learning - Bruno Lippi - Trabajo práctico Módulo 1</h6>\n        </nav>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}